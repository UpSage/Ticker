<?php
/** @var $block \Magento\Backend\Block\Template */
?>
<button id="select_all_nodes" type="button" style="margin-left: 10px; display: none;">Select All</button>
<div id="jstree_container"></div>
<button id="add_root_node" type="button">Add Root Node</button>
<button id="delete_selected_nodes" type="button" style="margin-left: 10px; display: none;">Delete Selected Nodes</button>

<!-- Modal for Node Details using Magento UI Component Modal -->
<div id="url_modal" style="display:none;">
    <div style="padding: 20px;">
        <h2>Node Details</h2>
        <label for="node_name">Node Name:</label>
        <input type="text" id="node_name" value="" /><br><br>
        
        <label for="url_select">Select URL Type:</label>
        <select id="url_select">
            <option value="">Select Type</option>
            <option value="cms_page">CMS Page</option>
            <option value="product">Product</option>
            <option value="category">Category</option>
        </select><br><br>

        <div id="urlInputContainer" style="display:none;">
            <label for="urlInput">Available URLs:</label>
            <select id="urlInput"></select>
        </div>

        <button id="save_url" type="button" class="action-primary">Save</button>
        <button id="close_modal" type="button" class="action-secondary">Cancel</button>
    </div>
</div>

<script>
require([
    'jquery',
    'Magento_Ui/js/modal/modal',
    'jstree'
], function($, modal) {
    $(document).ready(function() {
        var $tree = $('#jstree_container');
        var $modal = $('#url_modal');
        var selectedNode = null;
        var modalOptions = {
            type: 'popup',
            modalClass: 'magento',
            title: 'Edit Node',
            buttons: []
        };
        modal(modalOptions, $modal);

        // Initialize jstree
        function initTree() {
            var treeData = JSON.parse($('textarea[name="jstree_data"]').val() || '[]');

            // Check if tree data is empty, add a default root node
            if (treeData.length === 0) {
                treeData = [{
                    text: 'Menu <button class="add-child-btn">Add Sub Menu</button> <button class="edit-node-btn">Edit</button>',
                    children: [],
                    data: { name: 'Menu', url: '' }
                }];
            }

            $tree.jstree({
                'core': {
                    'check_callback': true,
                    'data': treeData
                },
                'plugins': ['dnd', 'checkbox']
            });

            // Show/hide buttons based on node count
            toggleButtonVisibility();
        }

        initTree();

        // Function to show/hide buttons based on the number of nodes
        function toggleButtonVisibility() {
            var nodeCount = $tree.jstree(true).get_json().length;
            if (nodeCount === 0) {
                $('#delete_selected_nodes').hide();
                $('#select_all_nodes').hide();
            } else {
                $('#delete_selected_nodes').show();
                $('#select_all_nodes').show();
                // Set the text based on the checked state
                updateSelectAllButtonText();
            }
        }

        // Function to update Select All button text
        function updateSelectAllButtonText() {
            var allNodes = $tree.jstree('get_json');
            var checkedNodes = $tree.jstree('get_checked', true);
            $('#select_all_nodes').text(checkedNodes.length === allNodes.length ? 'Unselect All' : 'Select All');
        }

        // Add root node button click event
        $('#add_root_node').on('click', function() {
            var newNode = {
                text: 'Menu <button class="add-child-btn">Add Sub Menu</button> <button class="edit-node-btn">Edit</button>',
                children: [],
                data: { name: 'Menu', url: '' }
            };

            $tree.jstree('create_node', null, newNode, 'last', function(new_node) {
                updateJsTreeData();
                toggleButtonVisibility(); // Check button visibility after adding a node
                $tree.jstree('deselect_all');
            });
        });

        // Function to handle adding a child node
        $(document).on('click', '.add-child-btn', function(e) {
            e.stopPropagation(); // Prevent checkbox toggle
            var nodeId = $(this).closest('li').attr('id');
            selectedNode = $tree.jstree(true).get_node(nodeId);

            if (selectedNode) {
                var newChildNode = {
                    text: 'Sub Menu <button class="add-child-btn">Add Sub Menu</button> <button class="edit-node-btn">Edit</button>',
                    children: [],
                    data: { name: 'Sub Menu', url: '' }
                };

                $tree.jstree('create_node', selectedNode, newChildNode, 'last', function(newNode) {
                    $tree.jstree('open_node', selectedNode); // Expand parent node after adding a child
                    updateJsTreeData();
                    toggleButtonVisibility(); // Check button visibility after adding a node
                });
            }
        });

        // Function to delete selected nodes
        $('#delete_selected_nodes').on('click', function() {
            var selectedNodes = $tree.jstree('get_checked', true);
            selectedNodes.forEach(function(node) {
                $tree.jstree('delete_node', node);
            });
            updateJsTreeData();
            toggleButtonVisibility(); // Check button visibility after deletion
        });

        // Select/Deselect all nodes
        $('#select_all_nodes').on('click', function() {
            var allNodes = $tree.jstree('get_json');
            var checkedNodes = $tree.jstree('get_checked', true);
            var isAllChecked = checkedNodes.length === allNodes.length;

            if (isAllChecked) {
                $tree.jstree('uncheck_all');
            } else {
                $tree.jstree('check_all');
            }

            // Update button text
            updateSelectAllButtonText();
        });

        // Function to handle edit button
        $(document).on('click', '.edit-node-btn', function(e) {
            e.stopPropagation(); // Prevent checkbox toggle
            var nodeId = $(this).closest('li').attr('id');
            selectedNode = $tree.jstree(true).get_node(nodeId);

            if (selectedNode) {
                // Populate modal with current node data (name and url)
                $('#node_name').val(selectedNode.data.name || '');
                $('#url_select').val(selectedNode.data.url_type || '');
                $('#urlInputContainer').hide(); // Hide URL input initially

                // Open modal
                openModal();
            }
        });

        // Listen for changes to the URL type dropdown
        $('#url_select').on('change', function() {
            var selectedType = $(this).val();
            if (selectedType) {
                // Fetch URLs based on the selected type
                $.ajax({
                    url: 'upsage_ticker/url/fetch', // Adjust URL as per your routing
                    type: 'POST',
                    data: {type: selectedType},
                    success: function(response) {
                        // Clear the existing options
                        $('#urlInput').empty();

                        // Populate the URL input dropdown with new options
                        $.each(response.urls, function(index, url) {
                            $('#urlInput').append($('<option></option>').attr('value', url).text(url));
                        });

                        // Show the URL input container
                        $('#urlInputContainer').show();
                    },
                    error: function() {
                        // Handle error if needed
                        console.error('Error fetching URLs');
                    }
                });
            } else {
                // Hide the URL input container if no type is selected
                $('#urlInputContainer').hide();
            }
        });

        // Save URL and Name button click event
        $('#save_url').on('click', function() {
            if (selectedNode) {
                var nodeName = $('#node_name').val();
                var selectedUrl = $('#urlInput').val();
                
                // Update node data and label
                selectedNode.data.name = nodeName;
                selectedNode.data.url = selectedUrl;
                selectedNode.data.url_type = $('#url_select').val();

                var updatedLabel = updateNodeText(nodeName, selectedUrl);
                $tree.jstree('rename_node', selectedNode, updatedLabel + ' <button class="add-child-btn">Add Sub Menu</button> <button class="edit-node-btn">Edit</button>');

                closeModal();
                updateJsTreeData();
                toggleButtonVisibility(); // Check button visibility after editing
            }
        });

        // Close modal button event
        $('#close_modal').on('click', function() {
            closeModal();
        });

        // Function to update node text with URL
        function updateNodeText(name, url) {
            return url ? name + ' (' + url + ')' : name;
        }

        // Update hidden textarea with jstree data
        function updateJsTreeData() {
            var json = $tree.jstree('get_json');
            $('textarea[name="jstree_data"]').val(JSON.stringify(json));
        }

        // Function to open modal
        function openModal() {
            $modal.modal('openModal');
        }

        // Function to close modal
        function closeModal() {
            $modal.modal('closeModal');
        }
    });
});
</script>
